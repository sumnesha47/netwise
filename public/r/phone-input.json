{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phone-input",
  "type": "registry:ui",
  "title": "Phone Input",
  "description": "A phone input component with country code selection.",
  "dependencies": [
    "lucide-react",
    "react-phone-number-input"
  ],
  "registryDependencies": [
    "input",
    "button",
    "command",
    "popover",
    "scroll-area"
  ],
  "files": [
    {
      "path": "registry/ui/phone-input.tsx",
      "content": "import { CheckIcon, ChevronsUpDown } from \"lucide-react\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport * as RPNInput from \"react-phone-number-input\";\r\n\r\nimport flags from \"react-phone-number-input/flags\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport { Input, InputProps } from \"@/components/ui/input\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\n\r\ntype PhoneInputProps = Omit<\r\n  React.InputHTMLAttributes<HTMLInputElement>,\r\n  \"onChange\" | \"value\"\r\n> &\r\n  Omit<RPNInput.Props<typeof RPNInput.default>, \"onChange\"> & {\r\n    onChange?: (value: RPNInput.Value) => void;\r\n  };\r\n\r\nconst PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\r\n  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\r\n    ({ className, onChange, ...props }, ref) => {\r\n      return (\r\n        <RPNInput.default\r\n          ref={ref}\r\n          className={cn(\"flex\", className)}\r\n          flagComponent={FlagComponent}\r\n          countrySelectComponent={CountrySelect}\r\n          inputComponent={InputComponent}\r\n          smartCaret={false}\r\n          /**\r\n           * Handles the onChange event.\r\n           *\r\n           * react-phone-number-input might trigger the onChange event as undefined\r\n           * when a valid phone number is not entered. To prevent this,\r\n           * the value is coerced to an empty string.\r\n           *\r\n           * @param {E164Number | undefined} value - The entered value\r\n           */\r\n          onChange={(value) => {\r\n            if (value) onChange?.(value);\r\n          }}\r\n          {...props}\r\n        />\r\n      );\r\n    }\r\n  );\r\nPhoneInput.displayName = \"PhoneInput\";\r\n\r\nconst InputComponent = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, ...props }, ref) => (\r\n    <Input\r\n      className={cn(\"rounded-e-lg rounded-s-none\", className)}\r\n      {...props}\r\n      ref={ref}\r\n    />\r\n  )\r\n);\r\nInputComponent.displayName = \"InputComponent\";\r\n\r\ntype CountrySelectOption = { label: string; value: RPNInput.Country };\r\n\r\ntype CountrySelectProps = {\r\n  disabled?: boolean;\r\n  value: RPNInput.Country;\r\n  onChange: (value: RPNInput.Country) => void;\r\n  options: CountrySelectOption[];\r\n};\r\n\r\nconst CountrySelect = ({\r\n  disabled,\r\n  value,\r\n  onChange,\r\n  options,\r\n}: CountrySelectProps) => {\r\n  const handleSelect = React.useCallback(\r\n    (country: RPNInput.Country) => {\r\n      onChange(country);\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          type=\"button\"\r\n          variant={\"outline\"}\r\n          className=\"flex gap-1 rounded-e-none rounded-s-lg border-r-0 px-3 focus:z-10\"\r\n          disabled={disabled}\r\n        >\r\n          <FlagComponent country={value} countryName={value} />\r\n          <ChevronsUpDown\r\n            className={cn(\r\n              \"-mr-2 h-4 w-4 opacity-50\",\r\n              disabled ? \"hidden\" : \"opacity-100\"\r\n            )}\r\n          />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[300px] p-0\">\r\n        <Command>\r\n          <CommandInput placeholder=\"Search country...\" />\r\n          <CommandList>\r\n            <ScrollArea className=\"h-72\">\r\n              <CommandEmpty>No country found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {options\r\n                  .filter((x) => x.value)\r\n                  .map((option) => (\r\n                    <CommandItem\r\n                      className=\"gap-2\"\r\n                      key={option.value}\r\n                      onSelect={() => handleSelect(option.value)}\r\n                    >\r\n                      <FlagComponent\r\n                        country={option.value}\r\n                        countryName={option.label}\r\n                      />\r\n                      <span className=\"flex-1 text-sm\">{option.label}</span>\r\n                      {option.value && (\r\n                        <span className=\"text-foreground/50 text-sm\">\r\n                          {`+${RPNInput.getCountryCallingCode(option.value)}`}\r\n                        </span>\r\n                      )}\r\n                      <CheckIcon\r\n                        className={cn(\r\n                          \"ml-auto h-4 w-4\",\r\n                          option.value === value ? \"opacity-100\" : \"opacity-0\"\r\n                        )}\r\n                      />\r\n                    </CommandItem>\r\n                  ))}\r\n              </CommandGroup>\r\n            </ScrollArea>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\r\n  const Flag = flags[country];\r\n\r\n  return (\r\n    <span className=\"bg-foreground/20 flex h-4 w-6 overflow-hidden rounded-sm [&_svg]:size-full\">\r\n      {Flag && <Flag title={countryName} />}\r\n    </span>\r\n  );\r\n};\r\nFlagComponent.displayName = \"FlagComponent\";\r\n\r\nexport { PhoneInput };\r\n",
      "type": "registry:ui"
    }
  ]
}